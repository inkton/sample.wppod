
# ------------------------------------------------------
#	Base Twig
#	(c) 2016 Inkton
#
#	the data model
#		forest [1 .. n]
#			tree [1 .. n]
#				nest [1 .. n]
#					cushion [1 .. n]
#						twig [1 .. n]
#
#	stages of cushion creation
#
#	stage 1 - create docker
#			base packages installed 
#	stage 2 - create platform
#			create cushion settings
#			user group created
#			create app admin
#

. $NEST_FOLDER_TREE/nest/utils/prefix

twig_links_begin() {
	NEST_BASE_VERSION=1.0
	NEST_TWIG_RUN_TIMESTAMP=$(date "+%Y.%m.%d-%H.%M.%S")
	NEST_LANGUAGE=''
	NEST_LANGUAGE_VERSION=''

	if [ "$NEST_CONTAINER_TYPE" == "test" ]; then
		NEST_BASE_PACKAGES='["git", "sudo", "openssl", "ca-certificates", "build-essential", "unzip", "rsync", "python-pip", "python-dev", "inetutils-ping"]'
	else
		NEST_BASE_PACKAGES='["git", "sudo", "openssl", "ca-certificates"]'
	fi
	
	. /etc/profile.d/99-forest-profile
}

link_twigs() {
	local to_init=twig_init_"$1"
	local to_init_func="$2"_init

	if function_exists "$to_init_func"; then
		eval "$to_init=$to_init_func"
	else
		eval "$to_init=null_callback"
	fi

	local to_shutdown=twig_shutdown_"$1"
	local to_shutdown_func="$2"_shutdown

	if function_exists "$to_init_func"; then
		eval "$to_shutdown=$to_shutdown_func"
	else
		eval "$to_shutdown=null_callback"
	fi
	
	local to_assign_b=twig_"$1"_before_"$NEST_OPERATION"
	local to_func_b="$2"_before_"$NEST_OPERATION"
	
	if function_exists "$to_func_b"; then
		eval "$to_assign_b='$to_func_b'"
	else
		eval "$to_assign_b=null_callback"
	fi

	local to_assign_a=twig_"$1"_after_"$NEST_OPERATION"
	local to_func_a="$2"_after_"$NEST_OPERATION"

	if function_exists "$to_func_a"; then
		eval "$to_assign_a='$to_func_a'"
	else
		eval "$to_assign_a=null_callback"
	fi
}

init_after() {
	local from=$1
	local call=twig_init_"$from"
	eval "\${$call}"
}

shutdown_before() {
	local from=$1
	local call=twig_shutdown_"$from"
	eval "\${$call}"
}

do_things() {
	local when=$1; local op=$2; local from=$3
	local call=twig_"$from"_"$when"_"$op"
	eval "\${$call}"
}

base_init() {
	yell "<- begin ->"
	init_after base
}

base_shutdown() {
	yell "<- end ->"; 
	shutdown_before base
	secure_access
}

twig_links_end()  {
	base_init
	eval $NEST_OPERATION
	base_shutdown
}

create_settings() {
	> /etc/profile.d/99-forest-profile
	> /etc/sudoers.d/99-forest-sudoers
	
	export NEST_CUSHION_SITE_VERSION=1
	export NEST_CUSHION_LANGUAGE=$NEST_LANGUAGE
	export NEST_CUSHION_LANGUAGE_VERSION=$NEST_LANGUAGE_VERSION
	
	echo "export NEST_CUSHION_SITE_VERSION=$NEST_CUSHION_SITE_VERSION" >> /etc/profile.d/99-forest-profile
	echo "export NEST_CUSHION_LANGUAGE=$NEST_CUSHION_LANGUAGE" >> /etc/profile.d/99-forest-profile
	echo "export NEST_CUSHION_SITE_VERSION=$NEST_CUSHION_SITE_VERSION" >> /etc/profile.d/99-forest-profile	
} 

secure_access() {
	yell "securing access to the public area"

        try sudo chown -R webadmin:tree "$NEST_FOLDER_SOURCE/$NEST_TAG_CAP"
        try sudo chown -R webuser:tree "$NEST_FOLDER_PUBLISH/$NEST_TAG_CAP"
        try sudo chown -R webadmin:tree "$NEST_FOLDER_SOURCE_SHARED"

        # Change directory permissions rwxr-xr-x
        try find "$NEST_FOLDER_SOURCE/$NEST_TAG_CAP" -type d -exec sudo chmod 775 {} \;
        # Change file permissions rw-r--r--
        try find "$NEST_FOLDER_SOURCE/$NEST_TAG_CAP" -type f -exec sudo chmod 775 {} \;

        # Change directory permissions rwxr-xr-x
        try find "$NEST_FOLDER_SOURCE_SHARED" -type d -exec sudo chmod 775 {} \;
        # Change file permissions rw-r--r--
        try find "$NEST_FOLDER_SOURCE_SHARED" -type f -exec sudo chmod 775 {} \;	
}

create_users() {
	. $NEST_FOLDER_TWIG_UTILS/shell 

	. $NEST_FOLDER_TWIG_UTILS/git

	NEST_NETWORK_PASSWORD=$(jq -r ".network_password" /var/app/app.json)

	shell_create_group 1008 tree
	shell_create_group 1010 tree-admin
	sudo echo "%tree-admin ALL=(ALL) NOPASSWD:ALL" | sudo tee -a /etc/sudoers

	shell_create_user 1012 webuser tree $NEST_NETWORK_PASSWORD
	shell_create_user 1016 webadmin tree $NEST_NETWORK_PASSWORD
	shell_make_user_sudo webadmin

	if [ "$NEST_CONTAINER_TYPE" != "test" ]; then
		jq -r '.contacts|keys[]' /var/app/app.json | while read key ; do
			NEST_USER_ID=$(jq ".contacts[$key].id" /var/app/app.json)
			NEST_USER_EMAIL=$(jq ".contacts[$key].email" /var/app/app.json)

			shell_create_user $NEST_USER_ID $NEST_USER_ID tree-admin
			git_create_user $NEST_USER_ID $NEST_USER_EMAIL $NEST_USER_EMAIL
		done
	fi
}

create_cushion() {
	do_things before create_cushion base

	# ----------------
	#  stage 2 create
	# ----------------
		
	create_settings
	create_users
	
	if [ $? -eq 0 ]; then

		NEST_CUSHION_CREATED=yes
		echo "export NEST_CUSHION_CREATED=$NEST_CUSHION_CREATED" >> /etc/profile.d/99-forest-profile			
	fi

	do_things after create_cushion base
}

destroy_cushion() {
	do_things before destroy_cushion base
	
	NEST_CUSHION_CREATED=no
	echo "export NEST_CUSHION_CREATED=$NEST_CUSHION_CREATED" >> /etc/profile.d/99-forest-profile
	
	do_things after destroy_cushion base
}

install() {
	do_things before install base
	
	try apt-get update -y
	apt-get install -y jq
	run_cmd "apt-get install -y" "$NEST_BASE_PACKAGES"
	
	jq -r '.service_subscriptions[].app_service_tier.app_service.tag' /var/app/app.json | 
	while read NEST_SERVICE_TAG ; do
		if [ "$NEST_SERVICE_TAG" == "mariadb" ] ;then
			apt-get install -y mariadb-client
			restore_db_schema
			restore_db_data
		fi
	done

	do_things after install base
}

update() {
	do_things before update base
	run_cmd "apt-get update -y" "$NEST_BASE_PACKAGES"

	jq -r '.service_subscriptions[].app_service_tier.app_service.tag' /var/app/app.json | 
	while read NEST_SERVICE_TAG ; do
		if [ "$NEST_SERVICE_TAG" == "mariadb" ] ;then
			apt-get install -y mariadb-client
			restore_db_schema
			restore_db_data
		fi
	done
	
	do_things after update base
}

upgrade() {
	do_things before upgrade base
	
	# upgrade the system
	apt-get upgrade -y -o Dpkg::Options::="--force-confold"	
	run_cmd "apt-get upgrade -y" "$NEST_BASE_PACKAGES"

	jq -r '.service_subscriptions[].app_service_tier.app_service.tag' /var/app/app.json | 
	while read NEST_SERVICE_TAG ; do
		if [ "$NEST_SERVICE_TAG" == "mariadb" ] ;then
			apt-get upgrade -y mariadb-client
		fi
	done

	do_things after upgrade base
}

remove() {
	do_things before remove base

	jq -r '.service_subscriptions[].app_service_tier.app_service.tag' /var/app/app.json | 
	while read NEST_SERVICE_TAG ; do
		if [ "$NEST_SERVICE_TAG" == "mariadb" ] ;then
			apt-get remove -y mariadb-client
		fi
	done

	run_cmd "apt-get remove -y" "$NEST_BASE_PACKAGES"

	fly rm -f $NEST_CUSHION_SETTINGS_PATH

	do_things after remove base
}
 
info() {
	do_things before info base

	jq -r '.service_subscriptions[].app_service_tier.app_service.tag' /var/app/app.json | 
	while read NEST_SERVICE_TAG ; do
		if [ "$NEST_SERVICE_TAG" == "mariadb" ] ;then
			apt-get show mariadb-client
		fi
	done

	run_cmd "apt-cache show" "$NEST_BASE_PACKAGES"

	cat $NEST_APP_SETTINGS_PATH

	do_things after info base
}

start() {
	do_things before start base
	do_things after start base
}

stop() {
	yell "going down ..."

	# this event needs to complete within 1 sec
	# the job will be killed if it take any longer
	# time consuming jobs should be scheduled for
	# daily cron or other user submitted jobs

	do_things before stop base
	do_things after stop base                                                                                                  
}

daily() {
	do_things before daily base
	
	do_things after daily base
}

change_db_password() {
	yell "backup db"
	. $NEST_FOLDER_TWIG_UTILS/db 
	db_change_password
}

backup_db() {
	yell "backup db"
	. $NEST_FOLDER_TWIG_UTILS/db 
	
	db_backup_schema
	db_backup_data
}

restore_db() {
	yell "restore schema"
	. $NEST_FOLDER_TWIG_UTILS/db
	
	db_restore_schema
	db_restore_data	
}
